#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Inconsolata\0"
0 13 90 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 250 13 13 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 136 160 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 38 114 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 182 54 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 182 54 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 230 219 116 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 230 219 116 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 234 186 137 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 234 186 137 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 238 8 8 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 238 8 8 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2448 0 28 3 16 #"#lang plai-typed"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 33 #";; Comp314 - 4th Project - PART02"
0 0 24 29 1 #"\n"
0 0 18 3 21 #";; - Modified Version"
0 0 24 29 1 #"\n"
0 0 18 3 16 #";; Kemal Akkoyun"
0 0 24 29 1 #"\n"
0 0 18 3 11 #";; 11076004"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 67
#";; Sources : Chris Stephenson's Comp314 Lectures, Videos and Notes."
0 0 24 29 1 #"\n"
0 0 18 3 53 #";; Book : http://cs.brown.edu/courses/cs173/2012/book"
0 0 24 29 1 #"\n"
0 0 18 3 61
#";; .plt Source : http://cs.brown.edu/courses/cs173/2012/lang/"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 65
#";; =========================================================== ;;"
0 0 24 29 1 #"\n"
0 0 18 3 25 #";;   ASSIGNMENT - PART 02"
0 0 24 29 1 #"\n"
0 0 18 3 65
#";; =========================================================== ;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 11 64
#";; Since plai-typed some how does not provide an exponentiation "
0 0 18 3 32 #"function, also square function, "
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; --- here is my own implementations."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 33 #";; expt : number number -> number"
0 0 24 29 1 #"\n"
0 0 18 11 67
#";; Purpose: To calculate exponentiation of given two number, first "
0 0 18 3 32 #"number base and second is power."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 5 #"even?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 25 #";; sqr : number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 48 #";; Purpose: To calculate square of given number."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 71
(
 #";; Pair is a well-known data structure in Lisp/Scheme family languag"
 #"es,"
) 0 0 24 29 1 #"\n"
0 0 18 3 57 #";; - since we do not have a data structure in plai-type, "
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; - this"
0 0 18 3 1 #" "
0 0 18 3 2 #"is"
0 0 18 3 1 #" "
0 0 18 3 2 #"an"
0 0 18 3 1 #" "
0 0 18 3 5 #"basic"
0 0 18 3 1 #" "
0 0 18 3 14 #"implementation"
0 0 18 3 1 #" "
0 0 18 3 2 #"of"
0 0 18 3 4 #" it."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 6 #"sym-op"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 14 3 2 #"ym"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 27 #";; A table for operations, "
0 0 24 29 1 #"\n"
0 0 18 3 7 #";; - by"
0 0 18 3 1 #" "
0 0 18 3 8 #"changing"
0 0 18 3 1 #" "
0 0 18 3 4 #"just"
0 0 18 3 1 #" "
0 0 18 3 4 #"this"
0 0 18 3 1 #" "
0 0 18 3 4 #"data"
0 0 18 3 1 #" "
0 0 18 3 10 #"structure,"
0 0 24 29 1 #"\n"
0 0 18 3 8 #";; - you"
0 0 18 3 1 #" "
0 0 18 3 3 #"can"
0 0 18 3 1 #" "
0 0 18 3 3 #"add"
0 0 18 3 1 #" "
0 0 18 3 3 #"any"
0 0 18 3 1 #" "
0 0 18 3 6 #"binary"
0 0 18 3 12 #" operations."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; A list of pair(sym-op) as table of operations."
0 0 24 29 1 #"\n"
0 0 18 3 24 #";; Handycap of this is, "
0 0 24 29 1 #"\n"
0 0 18 3 7 #";; - it"
0 0 18 3 1 #" "
0 0 18 3 2 #"is"
0 0 18 3 1 #" "
0 0 18 3 8 #"complety"
0 0 18 3 1 #" "
0 0 18 3 9 #"depending"
0 0 18 3 1 #" "
0 0 18 3 2 #"on"
0 0 18 3 1 #" "
0 0 18 3 4 #"host"
0 0 18 3 1 #" "
0 0 18 3 8 #"language"
0 0 18 3 1 #"'"
0 0 18 3 1 #"s"
0 0 18 3 12 #" operations."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 6 #"sym-op"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"sym-op"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 18 3 51 #";; Several binary operations added as it seen below"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 6 #"sym-op"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"sym-op"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 6 #"sym-op"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"^"
0 0 24 3 1 #" "
0 0 14 3 4 #"expt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 6 #"sym-op"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"custom"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; get-op : symbol -> ((number number) -> number)"
0 0 24 29 1 #"\n"
0 0 18 11 63
#";; Purpose : To obtain binary defined operation from operation "
0 0 18 3 11 #"definition "
0 0 18 3 6 #"table."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"get-op"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 9 #"sym-op-op"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 18 #";; assoc : symbol "
0 0 18 3 1 #"("
0 0 18 3 6 #"listof"
0 0 18 3 1 #" "
0 0 18 3 13 #"pair) -> pair"
0 0 24 29 1 #"\n"
0 0 18 11 67
#";; Purpose : To associate given symbol with operation defined in a "
0 0 18 3 13 #"listof pairs."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 2 #"lp"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #"))"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 3 #"let"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 7 #"list-op"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"sym-op-sym"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 2 #"lp"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"list-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 20 3 23 #"\"Operation not defined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"list-op"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 20 #"; Grammar for ExprC."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 25 #";; parse : s-exp -> ExprC"
0 0 24 29 1 #"\n"
0 0 18 3 58
#";; Purpose : To parse given s-exp to abstract syntax ExprC"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; Template : "
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 1 #"("
0 0 18 3 6 #"define"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 5 #"parse"
0 0 18 3 1 #" "
0 0 18 3 1 #"["
0 0 18 3 1 #"s"
0 0 18 3 1 #" "
0 0 18 3 1 #":"
0 0 18 3 1 #" "
0 0 18 3 12 #"s-expression"
0 0 18 3 1 #"]"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 7 #": ExprC"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 7 #"  (cond"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 4 #"    "
0 0 18 3 1 #"["
0 0 18 3 1 #"n"
0 0 18 3 5 #" ...]"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 4 #"    "
0 0 18 3 1 #"["
0 0 18 3 2 #"id"
0 0 18 3 5 #" ...]"
0 0 24 29 1 #"\n"
0 0 18 3 33 #";    any unary or binary function"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"s-expression"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 13 #"s-exp-number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"s-exp->number"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 24 3 1 #"("
0 0 14 3 11 #"s-exp-list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 3 1 #"("
0 0 16 3 3 #"let"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 24 3 1 #"["
0 0 14 3 2 #"sl"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 3 1 #"("
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 20 3 20 #"\"invalid list input\""
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 20 3 15 #"\"invalid input\""
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 10 #";; Tests :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"number->s-exp"
0 0 24 3 1 #" "
0 0 22 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"symbol->s-exp"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 2 #")("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 32 #";; Function Definition Structure"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"FunDefC"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 14 3 3 #"fdC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 40 #"; Example function definition namespace."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"FuncDefNameSpace"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 3 #"fdC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 3 #"fdC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 22 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 3 #"fdC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 22 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 50 #";; get-fundef : symbol (listof FunDefC) -> FunDefC"
0 0 24 29 1 #"\n"
0 0 18 11 71
(
 #";; Purpose : To find given symbol's(function name/identifier) functi"
 #"on "
) 0 0 18 3 10 #"definition"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; - from"
0 0 18 3 1 #" "
0 0 18 3 8 #"function"
0 0 18 3 1 #" "
0 0 18 3 21 #"definition namespace."
0 0 24 29 1 #"\n"
0 0 18 3 40 #";; Template : Basic Structural Recursion"
0 0 24 29 1 #"\n"
0 0 18 3 3 #"; ("
0 0 18 3 6 #"define"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 10 #"get-fundef"
0 0 18 3 1 #" "
0 0 18 3 1 #"["
0 0 18 3 1 #"n"
0 0 18 3 1 #" "
0 0 18 3 1 #":"
0 0 18 3 1 #" "
0 0 18 3 6 #"symbol"
0 0 18 3 1 #"]"
0 0 18 3 1 #" "
0 0 18 3 1 #"["
0 0 18 3 3 #"fds"
0 0 18 3 1 #" "
0 0 18 3 2 #": "
0 0 18 3 1 #"("
0 0 18 3 6 #"listof"
0 0 18 3 1 #" "
0 0 18 3 7 #"FunDefC"
0 0 18 3 1 #")"
0 0 18 3 1 #"]"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 9 #": FunDefC"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 7 #"  (cond"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 4 #"    "
0 0 18 3 1 #"["
0 0 18 3 1 #"("
0 0 18 3 6 #"empty?"
0 0 18 3 1 #" "
0 0 18 3 3 #"fds"
0 0 18 3 6 #") ...]"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 53 #"    [else ...(first fds) ...(get-fundef (rest fds))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"get-fundef"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #"]"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 14 3 3 #"fds"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"FunDefC"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"FunDefC"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 10 #"get-fundef"
0 0 24 3 1 #" "
0 0 20 3 33 #"\"reference to undefined function\""
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 8 #"fdC-name"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"get-fundef"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"get-fundef"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 16 #"FuncDefNameSpace"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 3 #"fdC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 22 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"get-fundef"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 14 3 16 #"FuncDefNameSpace"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 3 #"fdC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 22 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"get-fundef"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 14 3 16 #"FuncDefNameSpace"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 3 #"fdC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 39 #";; subst : number symbol ExprC -> ExprC"
0 0 24 29 1 #"\n"
0 0 18 3 52 #";; Purpose : To substitute symbols with expressions."
0 0 24 29 1 #"\n"
0 0 18 3 13 #";; Template :"
0 0 24 29 1 #"\n"
0 0 18 3 9 #"; (define"
0 0 18 3 7 #" (subst"
0 0 18 3 1 #" "
0 0 18 3 1 #"["
0 0 18 3 4 #"what"
0 0 18 3 1 #" "
0 0 18 3 1 #":"
0 0 18 3 1 #" "
0 0 18 3 5 #"ExprC"
0 0 18 3 1 #"]"
0 0 18 3 1 #" "
0 0 18 3 1 #"["
0 0 18 3 3 #"for"
0 0 18 3 1 #" "
0 0 18 3 1 #":"
0 0 18 3 1 #" "
0 0 18 3 6 #"symbol"
0 0 18 3 1 #"]"
0 0 18 3 1 #" "
0 0 18 3 1 #"["
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 1 #":"
0 0 18 3 1 #" "
0 0 18 3 5 #"ExprC"
0 0 18 3 1 #"]"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 7 #": ExprC"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 2 #"  "
0 0 18 3 1 #"("
0 0 18 3 9 #"type-case"
0 0 18 3 9 #" ExprC in"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 4 #"    "
0 0 18 3 1 #"["
0 0 18 3 4 #"numC"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"n"
0 0 18 3 1 #")"
0 0 18 3 5 #" ...]"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 4 #"    "
0 0 18 3 1 #"["
0 0 18 3 5 #"idC ("
0 0 18 3 2 #"s)"
0 0 18 3 5 #" ...]"
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 4 #"    "
0 0 18 3 1 #"["
0 0 18 3 4 #"appC"
0 0 18 3 5 #" (f a"
0 0 18 3 1 #")"
0 0 18 3 5 #" ...]"
0 0 24 29 1 #"\n"
0 0 18 3 31 #";    [binaryOpC (l r) ...l ...r"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 14 3 4 #"what"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #"] "
0 0 24 3 1 #"["
0 0 16 3 3 #"for"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #"]"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 16 3 3 #"for"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 14 3 4 #"what"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #" "
0 0 18 3 22 #";; What makes differen"
0 0 18 11 3 #"ce "
0 0 18 3 30 #"for eager evoluation in subst."
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 4 #"what"
0 0 24 3 1 #" "
0 0 16 3 3 #"for"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 4 #"what"
0 0 24 3 1 #" "
0 0 16 3 3 #"for"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 4 #"what"
0 0 24 3 1 #" "
0 0 16 3 3 #"for"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #"]"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 14 3 3 #"fds"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"FunDefC"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 20 3 20 #"\"shouldn't get here\""
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 4 #"appC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 24 3 1 #"["
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"fd"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"get-fundef"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 18 3 17 #";; Make it eager "
0 0 18 3 11 #"evaluation "
0 0 18 3 2 #"!!"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 3 1 #"("
0 0 14 3 7 #"fdC-arg"
0 0 24 3 1 #" "
0 0 14 3 2 #"fd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 3 1 #"("
0 0 14 3 8 #"fdC-body"
0 0 24 3 1 #" "
0 0 14 3 2 #"fd"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 9 #"binaryOpC"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 6 #"get-op"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 3 #"fds"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"number->s-exp"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 18 3 15 #";ERROR CASE : ("
0 0 18 3 4 #"test"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 6 #"interp"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 5 #"parse"
0 0 18 3 15 #" (symbol->s-exp"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 8 #" empty) "
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 12 #"      (error"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 29 #"interp \"shouldn't get here\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 19 #";; MORE TESTS BELOW"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 6 #";; eva"
0 0 18 3 19 #"l : s-exp -> number"
0 0 24 29 1 #"\n"
0 0 18 3 71
(
 #";; Purpose : A wrapper function to evaluate s-exp through our langua"
 #"ge."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"sexp"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"s-expression"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 2 #";("
0 0 18 3 6 #"interp"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 5 #"parse"
0 0 18 3 1 #" "
0 0 18 3 4 #"sexp"
0 0 18 3 2 #") "
0 0 18 3 7 #"empty))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 16 #"FuncDefNameSpace"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 2 #") "
0 0 22 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 2 #") "
0 0 22 3 2 #"12"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 2 #") "
0 0 22 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 2 #") "
0 0 22 3 2 #"-4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 6          10 18 4 #"3/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 18 3 41 #";; Racket numbers and operations rocks !!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"^"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 2 #"81"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 22 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 6 #"custom"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 2 #"10"
0 0 24 3 1 #")"
0           0
